{"version":3,"sources":["layout/Menu.js","utils/date-time.js","utils/format-reservation-date.js","utils/api.js","layout/ErrorAlert.js","layout/ReservationList.js","dashboard/TablesList.js","dashboard/Dashboard.js","layout/NotFound.js","reservations/ReservationError.js","reservations/ReserveForm.js","reservations/Reservations.js","search/Search.js","tables/TablesForm.js","tables/Tables.js","seat/Seat.js","layout/Routes.js","layout/Layout.js","App.js","index.js"],"names":["Menu","className","to","id","type","dateFormat","timeFormat","asDateString","date","getFullYear","toString","getMonth","padStart","getDate","today","Date","previous","currentDate","split","setMonth","setDate","next","formatDate","reservation","reservation_date","match","formatReservationDate","reservations","Array","isArray","map","API_BASE_URL","process","REACT_APP_API_BASE_URL","headers","Headers","fetchJson","url","options","onCancel","a","fetch","response","status","json","payload","error","Promise","reject","message","data","name","console","stack","resolve","createReservation","signal","method","body","JSON","stringify","log","readReservation","reservationId","then","formatReservationTime","updateReservation","updatedReservation","reservation_id","readByDate","searchByPhoneNumber","mobile_phone","statusUpdate","listTables","URL","createTable","newTable","seatTable","tableId","updatedTable","freeTable","append","ErrorAlert","ReservationList","history","useHistory","handleCancel","target","abortController","AbortController","value","window","confirm","go","deleteData","length","first_name","last_name","timeString","reservation_time","mobile_number","people","data-reservation-id-status","data-reservation-id-cancel","onClick","role","TablesList","tables","handleFinish","table","table_name","capacity","data-table-id-status","table_id","data-table-id-finish","Dashboard","params","useParams","useState","setReservations","setTables","reservationsError","setReservationsError","useEffect","catch","abort","activeTable","filter","Number","output","output2","NotFound","ReservationError","errorList","ReserveForm","formData","handleChange","onChange","style","width","required","Reservations","initialFormState","errorCodes","errorMessages","setFormData","setErrorList","output1","loadData","onSubmit","event","preventDefault","push","updateData","isDate","compareDate","getUTCDay","errList","forEach","code","index","goBack","Search","TablesForm","Tables","Seat","setReservation","seatingError","setSeatingError","matchedTable","Routes","exact","path","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7501b992.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the menu for this application.\r\n *\r\n * @returns {JSX.Element}\r\n */\r\n\r\nfunction Menu() {\r\n  return (\r\n    <nav className=\"navbar navbar-dark align-items-start p-0\">\r\n      <div className=\"container-fluid d-flex flex-column p-0\">\r\n        <Link\r\n          className=\"navbar-brand d-flex justify-content-center align-items-center sidebar-brand m-0\"\r\n          to=\"/\"\r\n        >\r\n          <div className=\"sidebar-brand-text mx-3\">\r\n            <span>Periodic Tables</span>\r\n          </div>\r\n        </Link>\r\n        <hr className=\"sidebar-divider my-0\" />\r\n        <ul className=\"nav navbar-nav text-light\" id=\"accordionSidebar\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/dashboard\">\r\n              <span className=\"oi oi-dashboard\" />\r\n              &nbsp;Dashboard\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/search\">\r\n              <span className=\"oi oi-magnifying-glass\" />\r\n              &nbsp;Search\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/reservations/new\">\r\n              <span className=\"oi oi-plus\" />\r\n              &nbsp;New Reservation\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/tables/new\">\r\n              <span className=\"oi oi-layers\" />\r\n              &nbsp;New Table\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <div className=\"text-center d-none d-md-inline\">\r\n          <button\r\n            className=\"btn rounded-circle border-0\"\r\n            id=\"sidebarToggle\"\r\n            type=\"button\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","const dateFormat = /\\d\\d\\d\\d-\\d\\d-\\d\\d/;\r\nconst timeFormat = /\\d\\d:\\d\\d/;\r\n\r\n/**\r\n * Formats a Date object as YYYY-MM-DD.\r\n *\r\n * This function is *not* exported because the UI should generally avoid working directly with Date instance.\r\n * You may export this function if you need it.\r\n *\r\n * @param date\r\n *  an instance of a date object\r\n * @returns {string}\r\n *  the specified Date formatted as YYYY-MM-DD\r\n */\r\nfunction asDateString(date) {\r\n  return `${date.getFullYear().toString(10)}-${(date.getMonth() + 1)\r\n    .toString(10)\r\n    .padStart(2, \"0\")}-${date.getDate().toString(10).padStart(2, \"0\")}`;\r\n}\r\n\r\n/**\r\n * Format a date string in ISO-8601 format (which is what is returned from PostgreSQL) as YYYY-MM-DD.\r\n * @param dateString\r\n *  ISO-8601 date string\r\n * @returns {*}\r\n *  the specified date string formatted as YYYY-MM-DD\r\n */\r\nexport function formatAsDate(dateString) {\r\n  return dateString.match(dateFormat)[0];\r\n}\r\n\r\n/**\r\n * Format a time string in HH:MM:SS format (which is what is returned from PostgreSQL) as HH:MM.\r\n * @param timeString\r\n *  HH:MM:SS time string\r\n * @returns {*}\r\n *  the specified time string formatted as YHH:MM.\r\n */\r\nexport function formatAsTime(timeString) {\r\n  return timeString.match(timeFormat)[0];\r\n}\r\n\r\n/**\r\n * Today's date as YYYY-MM-DD.\r\n * @returns {*}\r\n *  the today's date formatted as YYYY-MM-DD\r\n */\r\nexport function today() {\r\n  return asDateString(new Date());\r\n}\r\n\r\n/**\r\n * Subtracts one day to the specified date and return it in as YYYY-MM-DD.\r\n * @param currentDate\r\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\r\n * @returns {*}\r\n *  the date one day prior to currentDate, formatted as YYYY-MM-DD\r\n */\r\nexport function previous(currentDate) {\r\n  const date = new Date(...currentDate.split(\"-\"));\r\n  date.setMonth(date.getMonth() - 1);\r\n  date.setDate(date.getDate() - 1);\r\n  return asDateString(date);\r\n}\r\n\r\n/**\r\n * Adds one day to the specified date and return it in as YYYY-MM-DD.\r\n * @param currentDate\r\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\r\n * @returns {*}\r\n *  the date one day after currentDate, formatted as YYYY-MM-DD\r\n */\r\nexport function next(currentDate) {\r\n  const date = new Date(...currentDate.split(\"-\"));\r\n  date.setMonth(date.getMonth() - 1);\r\n  date.setDate(date.getDate() + 1);\r\n  return asDateString(date);\r\n}\r\n","import { formatAsDate } from \"./date-time\";\r\n\r\nfunction formatDate(reservation) {\r\n  reservation.reservation_date = formatAsDate(reservation.reservation_date);\r\n  return reservation;\r\n}\r\n\r\n/**\r\n * Formats the reservation_date property of a reservation.\r\n * @param reservations\r\n *  a single reservation, or an array of reservations.\r\n * @returns {[reservation]|reservation}\r\n *  the specified reservation(s) with the reservation_date property formatted as YYYY-MM-DD.\r\n */\r\nexport default function formatReservationDate(reservations) {\r\n  return Array.isArray(reservations)\r\n    ? reservations.map(formatDate)\r\n    : formatDate(reservations);\r\n}\r\n","/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nimport formatReservationDate from \"./format-reservation-date\";\r\nimport formatReservationTime from \"./format-reservation-date\";\r\n\r\nconst API_BASE_URL =\r\n  process.env.REACT_APP_API_BASE_URL || \"https://restaurant-reservation-back-end-i1tgsx2nj-okram2k.vercel.app/\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\nasync function fetchJson(url, options, onCancel) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    const payload = await response.json();\r\n\r\n    if (payload.error) {\r\n      return Promise.reject({ message: payload.error });\r\n    }\r\n    return payload.data;\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing reservation.\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\nexport async function listReservations(params, signal) {\r\n  const url = new URL(`${API_BASE_URL}/reservations/`);\r\n  Object.entries(params).forEach(([key, value]) =>\r\n    url.searchParams.append(key, value.toString())\r\n  );\r\n  return await fetchJson(url, { headers, signal }, [])\r\n    .then(formatReservationDate)\r\n    .then(formatReservationTime);\r\n}\r\n\r\n/**\r\n * Creates a new reservation.\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of the new reservation from the database\r\n */\r\n\r\n\r\nexport async function createReservation(reservation, signal) {\r\n  const url = `${API_BASE_URL}/reservations/`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(reservation),\r\n    signal,\r\n  };\r\n  console.log(\"post attempt:\", url, options);\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves a single reservatio with a reservationId\r\n * @param reservationId\r\n * The reservation Id for the reservation\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\n\r\nexport async function readReservation(reservationId, signal) {\r\n  const url = `${API_BASE_URL}/reservations/${reservationId}`;\r\n  return await fetchJson(url, { signal })\r\n    .then(formatReservationDate)\r\n    .then(formatReservationTime);\r\n}\r\n\r\n/**\r\n * Update a single reservatio with a reservationId\r\n * @param updatedReservation\r\n * An object of the updatedReservation, including the reservation_id\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\nexport async function updateReservation(updatedReservation, signal) {\r\n  const url = `${API_BASE_URL}/reservations/${updatedReservation.reservation_id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedReservation),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options)\r\n    .then(formatReservationDate)\r\n    .then(formatReservationTime);\r\n}\r\n\r\n/**\r\n * Delete a single reservatio with a reservationId\r\n * @param reservationId\r\n * The reservation Id for the reservation\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\nexport async function deleteReservation(reservationId, signal) {\r\n  const url = `${API_BASE_URL}/reservations/${reservationId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all reservations of a certain date.\r\n * @param reservation_date\r\n * A date in YYYY-MM-DD format\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\nexport async function readByDate(reservation_date, signal) {\r\n  const url = `${API_BASE_URL}/reservations/ByDate?reservation_date=${reservation_date}`;\r\n  return await fetchJson(url, { signal })\r\n    .then(formatReservationDate)\r\n    .then(formatReservationTime);\r\n}\r\n\r\n/**\r\n * Retrieves all reservations of a certain phone number.\r\n * @param mobile_phone\r\n * A phone number to search. The number will be stripped of all non numerical digits\r\n * and return soft partial matches. Searching with no number or a non-numerical search will\r\n * return all reservations in the database\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\nexport async function searchByPhoneNumber(mobile_phone, signal) {\r\n  const url = `${API_BASE_URL}/reservations?mobile_number=${mobile_phone}`;\r\n  return await fetchJson(url, { signal })\r\n    .then(formatReservationDate)\r\n    .then(formatReservationTime);\r\n}\r\n\r\n/**\r\n * Updates the status of a reservation\r\n * @param reservation_Id\r\n * The reservation ID for the reservation\r\n * @param status\r\n * An object containing {status: \"message\"} that updates the status field of a reservation\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[reservation]>}\r\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\r\n */\r\n\r\nexport async function statusUpdate(reservationId, status, signal) {\r\n  const url = `${API_BASE_URL}/reservations/${reservationId}/status`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(status),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options)\r\n    .then(formatReservationDate)\r\n    .then(formatReservationTime);\r\n}\r\n\r\n/**\r\n * List all tables.\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[tables]>}\r\n *  a promise that resolves to a possibly empty array of all tables from the database\r\n */\r\n\r\nexport async function listTables(signal) {\r\n  const url = new URL(`${API_BASE_URL}/tables/`);\r\n  return await fetchJson(url, { headers, signal }, []);\r\n}\r\n\r\n/**\r\n * Add a new table to the database.\r\n * @param newTable\r\n * An object containing the data of the new table\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[tables]>}\r\n *  a promise that resolves to a possibly empty array of all tables from the database\r\n */\r\n\r\nexport async function createTable(newTable, signal) {\r\n  const url = `${API_BASE_URL}/tables/`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(newTable),\r\n    signal,\r\n  };\r\n  console.log(\"post attempt:\", url, options);\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Update a table to the database.\r\n * @param updatedTable\r\n * An object containing the data of the table to be updated, incloding the updatedTable.table_id\r\n * @param signal\r\n * An optional abort signal\r\n * @returns {Promise<[tables]>}\r\n *  a promise that resolves to a possibly empty array of all tables from the database\r\n */\r\n\r\nexport async function updateTable(updatedTable, signal) {\r\n  const url = `${API_BASE_URL}/tables/${updatedTable.table_id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedTable),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Delete a table from the database.\r\n * @param tableId\r\n * The table_id for the table\r\n * @param signal\r\n * An optional abort signal\r\n */\r\n\r\nexport async function deleteTable(tableId, signal) {\r\n  const url = `${API_BASE_URL}/tables/${tableId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Occupy a table in the database.\r\n * @param tableId\r\n * The table_id for the table to be unseated. It's status field will be changed to \"Occupied\"\r\n * @param signal\r\n * An optional abort signal\r\n */\r\n\r\nexport async function seatTable(tableId, updatedTable, signal) {\r\n  const url = `${API_BASE_URL}/tables/${tableId}/seat`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedTable),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Unoccupy a table in the database.\r\n * @param tableId\r\n * The table_id for the table to be unseated. It's status field will be changed to \"Free\"\r\n * @param signal\r\n * An optional abort signal\r\n */\r\n\r\nexport async function freeTable(tableId, signal) {\r\n  const url = `${API_BASE_URL}/tables/${tableId}/seat`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React from \"react\";\r\n\r\n/**\r\n * Defines the alert message to render if the specified error is truthy.\r\n * @param error\r\n *  an instance of an object with `.message` property as a string, typically an Error instance.\r\n * @returns {JSX.Element}\r\n *  a bootstrap danger alert that contains the message string.\r\n */\r\n\r\nfunction ErrorAlert({ error }) {\r\n  return (\r\n    error && (\r\n      <div className=\"alert alert-danger m-2\">Error: {error.message}</div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default ErrorAlert;\r\n","import React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { statusUpdate } from \"../utils/api\";\r\nimport { formatAsTime } from \"../utils/date-time\";\r\n\r\n/*Takes in an array reservations and outputs a two column set of\r\n*cards with the reservaiton information. Also handles cancelling\r\n* a reservation with the handleCancel function.\r\n*/\r\n\r\nconst ReservationList = ({ reservations }) => {\r\n  const history = useHistory();\r\n  \r\n  //handleCancel inputs a target from a button and cancels the reservation, then refreshes the page.\r\n  const handleCancel = async ({ target }) => {\r\n    const abortController = new AbortController();\r\n    const value = target.value;\r\n    const result = window.confirm(\r\n      `Do you want to cancel this reservation? This cannot be undone.`\r\n    );\r\n    if (result) {\r\n      async function deleteData() {\r\n        try {\r\n          await statusUpdate(\r\n            value,\r\n            { status: \"Cancelled\" },\r\n            abortController.signal\r\n          );\r\n          history.go(0);\r\n        } catch (error) {\r\n          if (error.name === \"AbortError\") {\r\n            // Ignore `AbortError`\r\n            console.log(\"Aborted\");\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n      deleteData();\r\n    }\r\n  };\r\n\r\n  if (reservations.length > 0) {\r\n    return (\r\n      <div className=\"row\">\r\n        {reservations.map((reservation) => (\r\n          <div className=\"col-sm-6\" key={reservation.reservation_id}>\r\n            <div className=\"card text-white bg-dark mb-3\">\r\n              <div className=\"card-header\">\r\n                <h4>\r\n                  {reservation.first_name} {reservation.last_name}\r\n                </h4>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">\r\n                  Time: {formatAsTime(reservation.reservation_time)}\r\n                </h5>\r\n                <p className=\"card-text\">\r\n                  Date: {reservation.reservation_date} <br />\r\n                  Phone Number: {reservation.mobile_number}\r\n                  <br />\r\n                  Party Size: {reservation.people} <br />\r\n                </p>\r\n                <div data-reservation-id-status={reservation.reservation_id}>\r\n                  Status: {reservation.status}\r\n                </div>{\" \"}\r\n                <br /> <br />\r\n                {reservation.status === \"Booked\" ? (\r\n                  <div>\r\n                    <Link\r\n                      to={`/reservations/${reservation.reservation_id}/seat`}\r\n                      className=\"btn btn-success\"\r\n                    >\r\n                      Seat\r\n                    </Link>{\" \"}\r\n                    &nbsp;\r\n                    <Link\r\n                      to={`/reservations/${reservation.reservation_id}/edit`}\r\n                      className=\"btn btn-warning\"\r\n                    >\r\n                      Edit\r\n                    </Link>{\" \"}\r\n                    &nbsp;\r\n                    <button\r\n                      data-reservation-id-cancel={reservation.reservation_id}\r\n                      onClick={handleCancel}\r\n                      value={reservation.reservation_id}\r\n                      className=\"btn btn-danger\"\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <button\r\n                    data-reservation-id-cancel={reservation.reservation_id}\r\n                    onClick={handleCancel}\r\n                    value={reservation.reservation_id}\r\n                    className=\"btn btn-danger\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    //if there are no reservations display the no matching reservations message.\r\n    return (\r\n      <div className=\"alert alert-success\" role=\"alert\">\r\n        No matching reservations found.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ReservationList;\r\n","import React from \"react\";\r\n/*Takes an array of tables and lists them in 2 column cards with data. If the table is currently\r\noccupied it displays the finish button which calls the handleFinish function, clearing the table\r\nand setting that reservation to status \"Finished\"\r\n*/\r\nconst TablesList = ({ tables, handleFinish }) => {\r\n  if (tables.length > 0) {\r\n    return (\r\n      <div className=\"row\">\r\n        {tables.map((table) => (\r\n          <div className=\"col-sm-6\" key={table.table_id}>\r\n            <div className=\"card text-white bg-dark mb-3\">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{table.table_name}</h5>\r\n                <p className=\"card-text\">\r\n                  Table Capacity: {table.capacity} <br />\r\n                  Status:{\" \"}\r\n                  <span data-table-id-status={table.table_id}>\r\n                    {table.status}\r\n                  </span>\r\n                  <br />\r\n                  <br />\r\n                  {table.status === \"Occupied\" ? (\r\n                    <button\r\n                      data-table-id-finish={table.table_id}\r\n                      onClick={handleFinish}\r\n                      value={table.table_id}\r\n                      className=\"btn btn-success\"\r\n                    >\r\n                      Finish\r\n                    </button>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"alert alert-warning\" role=\"alert\">\r\n        There are no tables saved\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default TablesList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { readByDate, listTables, freeTable, statusUpdate } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { previous, next } from \"../utils/date-time\";\r\nimport ReservationList from \"../layout/ReservationList\";\r\nimport TablesList from \"./TablesList\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns a list of all reservations with today's date that\r\n * are still of status booked or seated along with all tables.\r\n */\r\nfunction Dashboard({ date }) {\r\n  const params = useParams();\r\n  if (params.date) {\r\n    date = params.date;\r\n  }\r\n  const [reservations, setReservations] = useState([]);\r\n  const [tables, setTables] = useState([]);\r\n  const [reservationsError, setReservationsError] = useState(null);\r\n\r\n  useEffect(loadDashboard, [date]);\r\n\r\n  function loadDashboard() {\r\n    const reservation_date = date;\r\n    const abortController = new AbortController();\r\n    setReservationsError(null);\r\n    readByDate(reservation_date, abortController.signal)\r\n      .then(setReservations)\r\n      .catch(setReservationsError);\r\n    listTables(abortController.signal)\r\n      .then(setTables)\r\n      .catch(setReservationsError);\r\n\r\n    return () => abortController.abort();\r\n  }\r\n  //handle finish takes target data from a table button and processes clearing the table and finishing the reservation\r\n  const handleFinish = async ({ target }) => {\r\n    const abortController = new AbortController();\r\n    const value = target.value;\r\n    const result = window.confirm(\r\n      `Is this table ready to seat new guests? This cannot be undone.`\r\n    );\r\n    if (result) {\r\n      async function deleteData() {\r\n        try {\r\n          const activeTable = tables.filter(\r\n            (table) => table.table_id === Number(value)\r\n          );\r\n          await freeTable(value, abortController.signal);\r\n          await statusUpdate(\r\n            activeTable[0].reservation_id,\r\n            { status: \"Finished\" },\r\n            abortController.signal\r\n          );\r\n          const output = await listTables(abortController.signal);\r\n          const output2 = await readByDate(date, abortController.signal);\r\n          setTables(output);\r\n          setReservations(output2);\r\n        } catch (error) {\r\n          if (error.name === \"AbortError\") {\r\n            // Ignore `AbortError`\r\n            console.log(\"Aborted\");\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n      deleteData();\r\n    }\r\n  };\r\n  return (\r\n    <main>\r\n      <h1>Dashboard</h1>\r\n      <div className=\"d-md-flex mb-3\">\r\n        <h4 className=\"mb-0\">Reservations for {date}</h4> <br />\r\n      </div>\r\n      <div>\r\n        <Link to={`/dashboard/${previous(date)}`} className=\"btn btn-dark\">\r\n          Previous\r\n        </Link>{\" \"}\r\n        &nbsp;\r\n        <Link to={`/dashboard/${next(date)}`} className=\"btn btn-dark\">\r\n          Next\r\n        </Link>{\" \"}\r\n        &nbsp;\r\n        <Link to={`/dashboard/`} className=\"btn btn-success\">\r\n          Today\r\n        </Link>\r\n      </div>\r\n      <br />\r\n      <div>\r\n        <ReservationList reservations={reservations} />\r\n      </div>\r\n      <h4 className=\"mb-0\">Tables:</h4> <br />\r\n      <div>\r\n        <TablesList tables={tables} handleFinish={handleFinish} />\r\n      </div>\r\n      <ErrorAlert error={reservationsError} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\n\r\n/**\r\n * Defines the \"Not Found\" page that is displayed for any unmatched route.\r\n *\r\n * You will not need to make changes to this file.\r\n *\r\n * @returns {JSX.Element}\r\n */\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\n\r\nconst ReservationError = ({ errorList }) => {\r\n  if (errorList.length > 0) {\r\n    return (\r\n      <div>\r\n        {errorList.map((message) => (\r\n          <ErrorAlert error={{ message }} />\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\nexport default ReservationError;\r\n","import React from \"react\";\r\n\r\nconst ReserveForm = ({ formData, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <label>First Name:</label> <br />\r\n      <input\r\n        id=\"first_name\"\r\n        type=\"text\"\r\n        name=\"first_name\"\r\n        onChange={handleChange}\r\n        value={formData.first_name}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>Last Name:</label> <br />\r\n      <input\r\n        id=\"last_name\"\r\n        type=\"text\"\r\n        name=\"last_name\"\r\n        onChange={handleChange}\r\n        value={formData.last_name}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>Mobile Number:</label> <br />\r\n      <input\r\n        id=\"mobile_number\"\r\n        type=\"text\"\r\n        name=\"mobile_number\"\r\n        onChange={handleChange}\r\n        value={formData.mobile_number}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>Date of Reservation:</label> <br />\r\n      <input\r\n        id=\"reservation_date\"\r\n        type=\"date\"\r\n        name=\"reservation_date\"\r\n        onChange={handleChange}\r\n        value={formData.reservation_date}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>Time of Reservation:</label> <br />\r\n      <input\r\n        id=\"reservation_time\"\r\n        type=\"time\"\r\n        name=\"reservation_time\"\r\n        onChange={handleChange}\r\n        value={formData.reservation_time}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>Number of people in the party (must be at least 1):</label> <br />\r\n      <input\r\n        id=\"people\"\r\n        type=\"number\"\r\n        name=\"people\"\r\n        onChange={handleChange}\r\n        value={formData.people}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\nexport default ReserveForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  createReservation,\r\n  readReservation,\r\n  updateReservation,\r\n} from \"../utils/api\";\r\nimport ReservationError from \"./ReservationError\";\r\nimport ReserveForm from \"./ReserveForm\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n * The reservations form can be used for making new reservations\r\n * or updating existing ones..\r\n */\r\nfunction Reservations({ date }) {\r\n  const params = useParams();\r\n  const reservation_id = params.reservation_id;\r\n  //if this is from the route /reservations/:reservation_id/edit the\r\n  //reservation_id will have a value, otherwise it will be undefined\r\n  const initialFormState = {\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    mobile_number: \"\",\r\n    reservation_date: date,\r\n    reservation_time: \"10:30:00\",\r\n    people: 1,\r\n  };\r\n  //the errorCodes array and errorMessages array have corresponding indexes. If\r\n  //a value on the errorCodes array is set to 1 it will tell the checks to add\r\n  //that corresponding errorMessage to the errorList.\r\n  let errorCodes = [0, 0, 0];\r\n  let errorMessages = [\r\n    \"Must select a future date\",\r\n    \"Restaraunt is closed on Tuesdays\",\r\n    \"Must select a time between 10:30AM - 9:30PM\",\r\n  ];\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const [errorList, setErrorList] = useState([]);\r\n  useEffect(() => {\r\n    //if reservation_id is not undefined pull the reservation data to be updated from the api.\r\n    if (reservation_id) {\r\n      const abortController = new AbortController();\r\n      async function loadData() {\r\n        try {\r\n          const output1 = await readReservation(\r\n            reservation_id,\r\n            abortController.signal\r\n          );\r\n          setFormData(output1);\r\n          //filter out any tables that aren't free when we set the tables array.\r\n        } catch (error) {\r\n          if (error.name === \"AbortError\") {\r\n            // Ignore `AbortError`\r\n            console.log(\"Aborted\");\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n      loadData();\r\n    }\r\n  }, [reservation_id]);\r\n  const abortController = new AbortController();\r\n  const history = useHistory();\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    //check there are no outstanding errors before we attempt to send data\r\n    if (errorList.length === 0) {\r\n      async function updateData() {\r\n        try {\r\n          //if reservaiton_id isn't undefined we are updating a reservation, if it's undefined we are creating a new reservation\r\n          if (reservation_id) {\r\n            await updateReservation(formData, abortController.signal);\r\n          } else {\r\n            await createReservation(formData, abortController.signal);\r\n          }\r\n          history.push(`/dashboard/${formData.reservation_date}`);\r\n        } catch (error) {\r\n          if (error.name === \"AbortError\") {\r\n            // Ignore `AbortError`\r\n            console.log(\"Aborted\");\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n      updateData();\r\n      return () => {\r\n        console.log(\"post cleanup\");\r\n        abortController.abort();\r\n      };\r\n    }\r\n  };\r\n  const handleChange = ({ target }) => {\r\n    let value = target.value;\r\n    //each time a value is change check to see if it is valid or not.\r\n    //people must be a positive integer, if it is at 0 or below set it to 1\r\n    if (target.name === \"people\" && target.value <= 0) {\r\n      value = 1;\r\n    }\r\n    //reservation date must not be a date in the past\r\n    if (target.name === \"reservation_date\") {\r\n      let isDate = new Date(value);\r\n      let compareDate = new Date(date);\r\n      if (isDate < compareDate) {\r\n        errorCodes[0] = 1;\r\n      } else {\r\n        errorCodes[0] = 0;\r\n      }\r\n      //reservation must not be on a tuesday\r\n      if (isDate.getUTCDay() === 2) {\r\n        errorCodes[1] = 1;\r\n      } else {\r\n        errorCodes[1] = 0;\r\n      }\r\n    }\r\n    //reservation must be between 10:30am and 9:30pm\r\n    if (target.name === \"reservation_time\") {\r\n      if (value >= \"10:30\" && value <= \"21:30\") {\r\n        errorCodes[2] = 0;\r\n      } else {\r\n        errorCodes[2] = 1;\r\n      }\r\n    }\r\n    //if any of these errors are triggered, combine them into the error list and then push it to the errorList\r\n    let errList = [];\r\n    errorCodes.forEach((code, index) => {\r\n      if (code === 1) {\r\n        errList.push(errorMessages[index]);\r\n      }\r\n    });\r\n    setErrorList(errList);\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Reservations</h1>\r\n      <div className=\"d-md-flex mb-3\">\r\n        <ReservationError errorList={errorList} />\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <ReserveForm formData={formData} handleChange={handleChange} />\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => history.goBack()}\r\n          className=\"btn btn-secondary\"\r\n        >\r\n          Cancel\r\n        </button>{\" \"}\r\n        &nbsp;\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Save\r\n        </button>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Reservations;\r\n","import React, { useState } from \"react\";\r\nimport { searchByPhoneNumber } from \"../utils/api\";\r\n//import ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ReservationList from \"../layout/ReservationList\";\r\n\r\n/**\r\n * Defines the dashboard page.\r\n * @param date\r\n *  the date for which the user wants to view reservations.\r\n * @returns {JSX.Element}\r\n */\r\nfunction Search() {\r\n  const [reservations, setReservations] = useState([]);\r\n  //const [reservationsError, setReservationsError] = useState(null);\r\n  const initialFormState = {\r\n    mobile_phone: \"xxx-xxx-xxxx\",\r\n  };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const abortController = new AbortController();\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    async function updateData() {\r\n      try {\r\n        const output = await searchByPhoneNumber(\r\n          formData.mobile_phone,\r\n          abortController.signal\r\n        );\r\n        setReservations(output);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          // Ignore `AbortError`\r\n          console.log(\"Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    updateData();\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  };\r\n  const handleChange = ({ target }) => {\r\n    let value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Search</h1>\r\n      <div className=\"d-md-flex mb-3\">\r\n        <h4 className=\"mb-0\">Search for a reservation by phone number</h4>\r\n      </div>\r\n      <div>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            id=\"mobile_phone\"\r\n            type=\"text\"\r\n            name=\"mobile_phone\"\r\n            onChange={handleChange}\r\n            value={formData.mobile_phone}\r\n            style={{ width: \"150px\" }}\r\n            required\r\n          />\r\n          &nbsp; &nbsp;\r\n          <button type=\"submit\" className=\"btn btn-dark\">\r\n            Find\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <br />\r\n      <div>\r\n        <ReservationList reservations={reservations} />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\n//this form is used for making or editing tables.\r\n\r\nconst TablesForm = ({ formData, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <label>Table Name:</label> <br />\r\n      <input\r\n        id=\"table_name\"\r\n        type=\"text\"\r\n        name=\"table_name\"\r\n        onChange={handleChange}\r\n        value={formData.table_name}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n      <label>Table Capacity (must be at least 1):</label> <br />\r\n      <input\r\n        id=\"capacity\"\r\n        type=\"number\"\r\n        name=\"capacity\"\r\n        onChange={handleChange}\r\n        value={formData.capacity}\r\n        style={{ width: \"50%\" }}\r\n        required\r\n      />\r\n      <br />\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\nexport default TablesForm;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createTable } from \"../utils/api\";\r\nimport TablesForm from \"./TablesForm\";\r\n\r\n/**\r\n * Defines the tables page.\r\n * This page allows the creaiton of a new table. After adding a table it returns the user to the dashboard.\r\n */\r\nfunction Tables() {\r\n  //default a table_name of \"Table Name\", capacity of 1, and status \"free\" as a new table can't be occupied.\r\n  const initialFormState = {\r\n    table_name: \"Table Name\",\r\n    capacity: 1,\r\n    status: \"Free\",\r\n  };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const abortController = new AbortController();\r\n  const history = useHistory();\r\n  //upon submission, add table to the databse then return to the dashboard.\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    async function updateData() {\r\n      try {\r\n        await createTable(formData, abortController.signal);\r\n        history.push(`/dashboard`);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          // Ignore `AbortError`\r\n          console.log(\"Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    updateData();\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  };\r\n  const handleChange = ({ target }) => {\r\n    let value = target.value;\r\n\r\n    if (target.name === \"capacity\" && target.value <= 0) {\r\n      value = 1;\r\n    }\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Tables</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <TablesForm formData={formData} handleChange={handleChange} />\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => history.goBack()}\r\n          className=\"btn btn-secondary\"\r\n        >\r\n          Cancel\r\n        </button>{\" \"}\r\n        &nbsp;\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Save\r\n        </button>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Tables;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  readReservation,\r\n  listTables,\r\n  seatTable,\r\n  statusUpdate,\r\n} from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\n/**\r\n * Defines the Seat page.\r\n * This page will take the reservation_id from the params and\r\n * display the reservation info and then show a list of tables\r\n * in an adjacet card to select to seat a reservation.\r\n */\r\n\r\nfunction Seat() {\r\n  const params = useParams();\r\n  const reservation_id = params.reservation_id;\r\n\r\n  const [reservation, setReservation] = useState([]);\r\n  const [tables, setTables] = useState([]);\r\n  //the default state has no table selected so has an error message asking the user to select a table\r\n  const [seatingError, setSeatingError] = useState({\r\n    message: \"Please select a table\",\r\n  });\r\n  const initialFormState = {\r\n    table_id: \"x\",\r\n  };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n\r\n  //load data from apis\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    async function loadData() {\r\n      try {\r\n        const output1 = await readReservation(\r\n          reservation_id,\r\n          abortController.signal\r\n        );\r\n        const output2 = await listTables(abortController.signal);\r\n        setReservation(output1);\r\n        //filter out any tables that aren't free when we set the tables array.\r\n        setTables(output2.filter((table) => table.status === \"Free\"));\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          // Ignore `AbortError`\r\n          console.log(\"Aborted\");\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    loadData();\r\n  });\r\n\r\n  //submission handler, only works if there are no seatingErrors\r\n\r\n  const abortController = new AbortController();\r\n  const history = useHistory();\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (seatingError === null) {\r\n      async function updateData() {\r\n        try {\r\n          await seatTable(\r\n            formData.table_id,\r\n            { reservation_id },\r\n            abortController.signal\r\n          );\r\n          await statusUpdate(\r\n            reservation_id,\r\n            { status: \"Seated\" },\r\n            abortController.signal\r\n          );\r\n          history.push(`/dashboard/`);\r\n        } catch (error) {\r\n          if (error.name === \"AbortError\") {\r\n            // Ignore `AbortError`\r\n            console.log(\"Aborted\");\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n      updateData();\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n  };\r\n  const handleChange = ({ target }) => {\r\n    let value = target.value;\r\n    let matchedTable = tables.filter(\r\n      (table) => table.table_id === Number(value)\r\n    );\r\n    //if the ---select a table--- or a table without enough capacity are chosen, set an error\r\n    if (value === \"x\") {\r\n      setSeatingError({ message: \"Please select a table\" });\r\n    } else {\r\n      if (reservation.people > matchedTable[0].capacity) {\r\n        setSeatingError({\r\n          message: \"That table does not have enough capacity\",\r\n        });\r\n      } else {\r\n        //else remove all errors.\r\n        setSeatingError(null);\r\n      }\r\n    }\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Seat Party</h1>\r\n      <ErrorAlert error={seatingError} />\r\n      <div className=\"d-md-flex mb-3\">\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card text-white bg-dark mb-3\">\r\n            <div className=\"card-header\">\r\n              <h4>\r\n                {reservation.first_name} {reservation.last_name}\r\n              </h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">\r\n                Time: {reservation.reservation_time}\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                date: {reservation.reservation_date} <br />\r\n                Mobile Number: {reservation.mobile_number}\r\n                <br />\r\n                Party Size: {reservation.people} <br /> <br />\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card text-white bg-dark mb-3\">\r\n            <div className=\"card-header\">\r\n              <h4>Select a Table</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <select\r\n                  name=\"table_id\"\r\n                  onChange={handleChange}\r\n                  className=\"form-control form-control-lg\"\r\n                  value={formData.table_id}\r\n                >\r\n                  <option value=\"x\">--- Select A Table ---</option>\r\n                  {tables.map((table) => (\r\n                    <option value={table.table_id}>\r\n                      {table.table_name} - {table.capacity}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                <br />\r\n                <br />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => history.goBack()}\r\n                  className=\"btn btn-secondary\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                &nbsp; &nbsp;\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Save\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div></div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Seat;\r\n","import React from \"react\";\r\n\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Dashboard from \"../dashboard/Dashboard\";\r\nimport NotFound from \"./NotFound\";\r\nimport Reservations from \"../reservations/Reservations\";\r\nimport Search from \"../search/Search\";\r\nimport Tables from \"../tables/Tables\";\r\nimport Seat from \"../seat/Seat\";\r\nimport { today } from \"../utils/date-time\";\r\n\r\n/**\r\n * Defines all the routes for the application.\r\n *\r\n * You will need to make changes to this file.\r\n *\r\n * @returns {JSX.Element}\r\n */\r\nfunction Routes() {\r\n  return (\r\n    <Switch>\r\n      <Route exact={true} path=\"/\">\r\n        <Redirect to={\"/dashboard\"} />\r\n      </Route>\r\n      <Route exact={true} path=\"/reservations\">\r\n        <Redirect to={\"/dashboard\"} />\r\n      </Route>\r\n      <Route path=\"/dashboard/:date\">\r\n        <Dashboard />\r\n      </Route>\r\n      <Route path=\"/dashboard/\">\r\n        <Dashboard date={today()} />\r\n      </Route>\r\n      <Route path=\"/search\">\r\n        <Search />\r\n      </Route>\r\n      <Route path=\"/reservations/:reservation_id/seat\">\r\n        <Seat />\r\n      </Route>\r\n      <Route path=\"/reservations/:reservation_id/edit\">\r\n        <Reservations date={today()} />\r\n      </Route>\r\n      <Route path=\"/reservations/new\">\r\n        <Reservations date={today()} />\r\n      </Route>\r\n      <Route path=\"/tables/new\">\r\n        <Tables date={today()} />\r\n      </Route>\r\n      <Route>\r\n        <NotFound />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport Menu from \"./Menu\";\r\nimport Routes from \"./Routes\";\r\n\r\nimport \"./Layout.css\";\r\n\r\n/**\r\n * Defines the main layout of the application.\r\n *\r\n * You will not need to make changes to this file.\r\n *\r\n * @returns {JSX.Element}\r\n */\r\nfunction Layout() {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row h-100\">\r\n        <div className=\"col-md-2 side-bar\">\r\n          <Menu />\r\n        </div>\r\n        <div className=\"col\">\r\n          <Routes />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Layout from \"./layout/Layout\";\r\n\r\n/**\r\n * Defines the root application component.\r\n * @returns {JSX.Element}\r\n */\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\">\r\n        <Layout />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}